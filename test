const AWS = require("aws-sdk");
const zlib = require("zlib");
const { promisify } = require("util");

const lambda = new AWS.Lambda();
const myDocumentClient = new AWS.DynamoDB.DocumentClient();
const asyncDeflate = promisify(zlib.deflate);

async function zip(object) {
  return (await asyncDeflate(JSON.stringify(object))).toString("base64");
}

exports.handler = function(event, context, callback) {
  const staffIndexList = event.ddbstaffMappingList;
  const dateString = event.datestring;
  console.log("dateString: ", dateString);

  const dict = {};
  let ddbAppDetailsList = [];

  let startDate, endDate;

  if (event.startDate && event.endDate) {
    startDate = event.startDate;
    endDate = event.endDate;
    console.log("startDate from event: ", startDate);
    console.log("endDate from event: ", endDate);
  } else {
    const todayDate = new Date();
    const prevDate = new Date(new Date().setDate(todayDate.getDate() - 1));
    startDate = prevDate.toISOString();
    endDate = todayDate.toISOString();
  }

  const rangeDateCM = new Date(new Date().setDate(new Date().getDate() - 1));
  const dateStringCM = rangeDateCM.toISOString();

  if (event.role === "TM" || event.role === "TL") {
    queryAppDetailsWithStaffId(0);
  } else if (event.role === "CM") {
    queryAppDetailsForCM(0);
  } else if (event.role === "PU") {
    queryAppDetailsWithChannelId(0);
  } else {
    callback(null, null);
  }

  function queryAppDetailsWithStaffId(index) {
    if (index === staffIndexList.length) {
      zip(dict).then(result => {
        callback(null, result);
      });
    } else {
      queryAppDetails(index);
    }
  }

  function queryAppDetails(index) {
    const staffId = staffIndexList[index]["STF ID"];
    console.log("staffId: ", staffId);
    console.log("startDate: ", startDate);
    console.log("endDate: ", endDate);

    const appTableParams = {
      TableName: "APP DETAILS",
      IndexName: "STF_ID-CREATION DT-index",
      KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT BETWEEN :startDate AND :endDate",
      ExpressionAttributeNames: {
        "#STF_ID": "STF_ID",
        "#CREATION_DT": "CREATION DT"
      },
      ExpressionAttributeValues: {
        ":stfId": staffId,
        ":startDate": startDate,
        ":endDate": endDate
      },
      ScanIndexForward: false
    };

    console.log("appTableParams: ", appTableParams);

    try {
      ddbAppDetailsList = [];
      myDocumentClient.query(appTableParams, onQuery);

      function onQuery(err, data) {
        if (err) {
          console.log("Inside error", err);
        } else {
          if (data && data.Items && data.Items.length > 0) {
            for (let i = 0; i < data.Items.length; i++) {
              const mapApp = setAppData(data.Items[i]);
              ddbAppDetailsList.push(mapApp);
            }

            if (typeof data.LastEvaluatedKey !== "undefined") {
              appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
              myDocumentClient.query(appTableParams, onQuery);
            } else {
              dict[staffId] = ddbAppDetailsList;
              queryAppDetailsWithStaffId(index + 1);
            }
          } else {
            queryAppDetailsWithStaffId(index + 1);
          }
        }
      }
    } catch (e) {
      console.log("Error while querying data", e);
    }
  }

  function queryAppDetailsForCM(index) {
    if (index === Object.keys(staffIndexList).length) {
      zip(dict).then(result => {
        callback(null, result);
      });
    } else {
      queryAppDetailsChannelManager(index);
    }
  }

  function queryAppDetailsChannelManager(index) {
    const staffId = Object.keys(staffIndexList)[index];
    if (staffId !== "NA") {
      const appTableParams = {
        TableName: "APP DETAILS",
        IndexName: "STF_ID-CREATION DT-index",
        KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT >= :sysdate",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION DT"
        },
        ExpressionAttributeValues: {
          ":stfId": staffId,
          ":sysdate": dateStringCM
        },
        ScanIndexForward: false
      };

      try {
        ddbAppDetailsList = [];
        myDocumentClient.query(appTableParams, onQuery);

        function onQuery(err, data) {
          if (err) {
            console.log("Inside error", err);
          } else {
            if (data && data.Items && data.Items.length > 0) {
              for (let i = 0; i < data.Items.length; i++) {
                const mapApp = setAppData(data.Items[i]);
                ddbAppDetailsList.push(mapApp);
              }

              if (typeof data.LastEvaluatedKey !== "undefined") {
                appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                myDocumentClient.query(appTableParams, onQuery);
              } else {
                queryInner(staffId, index, 0);
              }
            } else {
              queryInner(staffId, index, 0);
            }
          }
        }
      } catch (e) {
        console.log("Error while querying data", e);
      }
    } else {
      console.log("StaffId: NA");
      queryInnerForNA(staffId, index, 0);
    }
  }

  function queryInnerForNA(staffId, parentIndex, childIndex) {
    const innerStaffList = staffIndexList[staffId];
    if (childIndex === innerStaffList.length) {
      queryAppDetailsForCM(parentIndex + 1);
    } else {
      const innerStaffId = innerStaffList[childIndex]["STF ID"];
      if (!(innerStaffId in dict)) {
        const innerTableParams = {
          TableName: "APP DETAILS",
          IndexName: "STF_ID-CREATION DT-index",
          KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT >= :sysdate",
          ExpressionAttributeNames: {
            "#STF_ID": "STF_ID",
            "#CREATION_DT": "CREATION DT"
          },
          ExpressionAttributeValues: {
            ":stfId": innerStaffId,
            ":sysdate": dateStringCM
          },
          ScanIndexForward: false
        };

        try {
          ddbAppDetailsList = [];
          myDocumentClient.query(innerTableParams, onQueryInnerForNA);

          function onQueryInnerForNA(err, data) {
            if (err) {
              console.log("Inside error", err);
            } else {
              if (data && data.Items && data.Items.length > 0) {
                for (let i = 0; i < data.Items.length; i++) {
                  const mapApp = setAppData(data.Items[i]);
                  ddbAppDetailsList.push(mapApp);
                }

                if (typeof data.LastEvaluatedKey !== "undefined") {
                  innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                  myDocumentClient.query(innerTableParams, onQueryInnerForNA);
                } else {
                  dict[innerStaffId] = ddbAppDetailsList;
                  queryInnerForNA(staffId, parentIndex, childIndex + 1);
                }
              } else {
                queryInnerForNA(staffId, parentIndex, childIndex + 1);
              }
            }
          }
        } catch (e) {
          console.log("Error while querying data", e);
        }
      } else {
        queryInnerForNA(staffId, parentIndex, childIndex + 1);
      }
    }
  }

  function queryInner(staffId, parentIndex, childIndex) {
    const innerStaffList = staffIndexList[staffId];
    if (childIndex === innerStaffList.length) {
      dict[staffId] = ddbAppDetailsList;
      queryAppDetailsForCM(parentIndex + 1);
    } else {
      const innerStaffId = innerStaffList[childIndex]["STF ID"];
      const innerTableParams = {
        TableName: "APP DETAILS",
        IndexName: "STF_ID-CREATION DT-index",
        KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT >= :sysdate",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION DT"
        },
        ExpressionAttributeValues: {
          ":stfId": innerStaffId,
          ":sysdate": dateStringCM
        },
        ScanIndexForward: false
      };

      try {
        ddbAppDetailsList = [];
        myDocumentClient.query(innerTableParams, onQueryInner);

        function onQueryInner(err, data) {
          if (err) {
            console.log("Inside error", err);
          } else {
            if (data && data.Items && data.Items.length > 0) {
              for (let i = 0; i < data.Items.length; i++) {
                const mapApp = setAppData(data.Items[i]);
                ddbAppDetailsList.push(mapApp);
              }

              if (typeof data.LastEvaluatedKey !== "undefined") {
                innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                myDocumentClient.query(innerTableParams, onQueryInner);
              } else {
                queryInner(staffId, parentIndex, childIndex + 1);
              }
            } else {
              queryInner(staffId, parentIndex, childIndex + 1);
            }
          }
        }
      } catch (e) {
        console.log("Error while querying data", e);
      }
    }
  }

  function queryAppDetailsWithChannelId(index) {
    if (index === staffIndexList.length) {
      callback(null, JSON.stringify(dict, (key, value) => {
        if (typeof value === 'bigint') {
          return value.toString();
        }
        return value;
      }));
    } else {
      queryAppDetailsPU(index);
    }
  }

  function queryAppDetailsPU(index) {
    const channelId = staffIndexList[index]["CHANNEL ID"];
    const appTableParams = {
      TableName: "APP DETAILS",
      IndexName: "CHANNEL_ID-CREATION DT-index",
      KeyConditionExpression: "#CHANNEL_ID = :channelId AND #CREATION_DT >= :sysdate",
      ExpressionAttributeNames: {
        "#CHANNEL_ID": "CHANNEL ID",
        "#CREATION_DT": "CREATION DT"
      },
      ExpressionAttributeValues: {
        ":channelId": channelId,
        ":sysdate": dateString
      },
      ScanIndexForward: false
    };

    try {
      ddbAppDetailsList = [];
      myDocumentClient.query(appTableParams, onQuery);

      function onQuery(err, data) {
        if (err) {
          console.log("Inside error", err);
        } else {
          if (data && data.Items && data.Items.length > 0) {
            data.Items.forEach(item => {
              const mapApp = setAppData(item);
              ddbAppDetailsList.push(mapApp);
            });

            if (typeof data.LastEvaluatedKey !== "undefined") {
              appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
              myDocumentClient.query(appTableParams, onQuery);
            } else {
              dict[channelId] = ddbAppDetailsList;
              queryAppDetailsWithChannelId(index + 1);
            }
          } else {
            queryAppDetailsWithChannelId(index + 1);
          }
        }
      }
    } catch (e) {
      console.log("Error while querying data", e);
    }
  }

  function setAppData(items) {
    const mapParam = {};
    if (items !== undefined) {
      mapParam.appId = items["APP ID"];
      mapParam.staffId = items["STF ID"];
      mapParam.aapsId = items["AAPS ID"];
      mapParam.aapsStatus = items["AAPS STATUS"];
      mapParam.additionalData = items["ADDITIONAL DATA"];
      mapParam.applstatus = items["APPL STATUS"];
      mapParam.bureaustatus = items["BUREAUSTATUS"];
      mapParam.campaignid = items["CAMPAIGNID"];
      mapParam.cardApplied = items["CARD TYPE"];
      mapParam.channelId = items["CHANNEL ID"];
      mapParam.cId = items["CID"];
      mapParam.appCompletionDate = items["COMPLETION DT"];
      mapParam.appCreationDate = items["CREATION DT"];
      mapParam.custDob = items["CUST DOB"];
      mapParam.custEmail = items["CUST EMAIL"];
      mapParam.customerID = items["CUST ID"];
      mapParam.custIname = items["CUST LNAME"];
      mapParam.customerName = items["CUST NAME"];
      mapParam.homeCountry = items["HOME COUNTRY"];
      mapParam.idType = items["ID TYPE"];
      mapParam.isLead = items["IS LEAD"];
      mapParam.mobileNumber = items["MOB NUM"];
      mapParam.otpVerifyStatus = items["OTP VERIFY STATUS"];
      mapParam.remarks = items["REMARKS"];
      mapParam.srcUrl = items["SRC URL"];
      mapParam.staffName = items["STF NAME"];
      mapParam.homeBlock = items["HOME BLOCK"];
      mapParam.homeCity = items["HOME CITY"];
      mapParam.homeProvince = items["HOME PROVINCE"];
      mapParam.homeStreet = items["HOME STREET"];
      mapParam.homeZipcode = items["HOME ZIPCODE"];
      mapParam.custMname = items["CUST MNAME"];
      mapParam.jumioCustRef = items["JUMIO CUST REF"];
      mapParam.creditCardNum = items["CREDIT CARD NUM"];
      mapParam.apeMessage = items["APEMessage"];
      mapParam.apeResponseBody = items["APEResponseBody"];
      mapParam.apeStatusCode = items["APEStatusCode"];
      mapParam.apeId = items["APE_TD"];
      mapParam.homeAdd1 = items["HOME ADD1"];
      mapParam.homeAdd2 = items["HOME ADD2"];
      mapParam.homeAdd3 = items["HOME ADD3"];
      mapParam.promoCode = items["VOUCHER CODE"];
      mapParam.idTypeValue = items["ID_TYPE_VALUE"];
      mapParam.staffTimestamp = items["STAFFTIMESTAMP"];
      mapParam.followUpStatus = items["FOLLOWUPSTATUS"];
      mapParam.remarksOnly = items["REMARKSONLY"];
    }
    return mapParam;
  }
};
