import AWS from "aws-sdk";

const $s3 = new AWS.S3();

var myDocumentClient = new AWS.DynamoDB.DocumentClient();
const { deflate } = require("zlib");

const promisify = require("util");

const asyncDeflate = promisify(deflate);

async function zip(object) {
  return (await asyncDeflate(JSON.stringify(object))).toString("base64");
}

exports.handler = function (event, context, callback) {
  // TODO implement
  console.log("Event", event);
  var staffIndexList = event.ddbStaffMappingList;
  console.log("staffIndexList: ", staffIndexList);

  var dict = {};
  var appData = {};

  var ddbAppDetailsList = [];
  var startDate = event.startDate;
  var endDate = event.endDate;

  var index = 0;

  var lastEvaluatedKey = event.lastEvaluatedKey;
  console.log("lastEvaluatedKey: ", lastEvaluatedKey);

  console.log("event.ChannelListIndex", event.ChannelListIndex);
  if (event.ChannelListIndex) {
    index = event.ChannelListIndex;
  }
  console.log("index: ", index);
  console.log("Role", event.role);

  if (event.role === "TM" || event.role === "TL") {
    queryAppDetailsWithStaffId(0);
  } else if (event.role === "CM") {
    queryAppDetailsForCM(0);
  } else if (event.role === "PU") {
    console.log("executing PU role", index);
    queryAppDetailsWithChannelId(index);
  } else {
    callback(null, null);
  }

  function queryAppDetailsWithStaffId(index) {
    if (index == staffIndexList.length) {
      callback(
        null,
        JSON.stringify(dict, function (key, value) {
          if (value > Number.MAX_SAFE_INTEGER) {
            return value.toString() + "";
          } else {
            return value;
          }
        }),
      );
    } else {
      queryAppDetails(index);
    }
  }

  function onQuery(err, data) {
    if (err) {
      console.log("Inside error", err);
    } else {
      let mapApp = null;
      if (data && data.Items && data.Items.length > 0) {
        for (var i = 0; i < data.Items.length; i++) {
          mapApp = setAppData(data.Items[i]);
          ddbAppDetailsList.push(mapApp);
        }
        if (typeof data.LastEvaluatedKey != "undefined") {
          appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
          myDocumentClient.query(appTableParams, onQuery);
        } else {
          dict[staffId] = ddbAppDetailsList;
          queryAppDetailsWithStaffId(index + 1);
        }
      }
    }
  }

  function queryAppDetails(index) {
    var staffId = staffIndexList[index].STF_ID;
    var appTableParams = {
      TableName: "APP_DETAILS",
      IndexName: "STF_ID-CREATION_DT-index",
      KeyConditionExpression:
        "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
      ExpressionAttributeNames: {
        "#STF_ID": "STF_ID",
        "#CREATION_DT": "CREATION_DT",
      },
      ExpressionAttributeValues: {
        ":stfId": staffId,
        ":startDate": startDate,
        ":endDate": endDate,
      },
      ScanIndexForward: "backward",
    };
    try {
      ddbAppDetailsList = [];
      myDocumentClient.query(appTableParams, onQuery);
    } catch (e) {
      console.log("error while querying data", e);
    }
  }

  function queryAppDetailsForCM(index) {
    console.log("CM queryAppDetailsForCM==>");
    if (index == Object.keys(staffIndexList).length) {
      console.log("dict  > ,dict)");
      const zipObject = zip(dict);
      zipObject.then(function (result) {
        callback(null, result);
      });
    } else {
      queryAppDetailsChannelManager(index);
    }
  }

  function queryAppDetailsChannelManager(index) {
    console.log("CM queryAppDetailsChannelManager==>");

    var staffId = Object.keys(staffIndexList)[index];
    console.log("staffId: ", staffId);
    if (staffId !== "NA") {
      var appTableParams = {
        TableName: "APP_DETAILS",
        IndexName: "STF_ID-CREATION_DT-index",
        KeyConditionExpression:
          "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION_DT",
        },
        ExpressionAttributeValues: {
          ":stfId": staffId,
          ":startDate": startDate,
          ":endDate": endDate,
        },
        ScanIndexForward: "backward",
      };
      try {
        ddbAppDetailsList = [];
        myDocumentClient.query(appTableParams, onQuery);
      } catch (e) {
        console.log("Inside error", e);
      }
    } else {
      console.log("StaffId ^^^^^^^^^^", staffId);
      queryInnerForNA(staffId, index, 0);
    }
  }

  function queryInnerForNA(staffId, parentIndex, childIndex) {
    var innerStaffList = staffIndexList[staffId];
    console.log("innerStaffList:", innerStaffList);
    console.log("childIndex:", childIndex);
    console.log("innerStaffList length", innerStaffList.length);
    if (childIndex == innerStaffList.length) {
      queryAppDetailsForCM(parentIndex + 1);
    } else {
      var innerStaffIdNA = innerStaffList[childIndex]["STF_ID"];
      console.log("innerStaffIdNA: ", innerStaffIdNA);
      if (!(innerStaffIdNA in dict)) {
        console.log("NA staff id", innerStaffIdNA);
        var innerTableParams = {
          TableName: "APP_DETAILS",
          IndexName: "STF_ID-CREATION_DT-index",
          KeyConditionExpression:
            "STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
          ExpressionAttributeNames: {
            "#STF_ID": "STF_ID",
            "#CREATION_DT": "CREATION_DT",
          },
          ExpressionAttributeValues: {
            ":stfId": innerStaffIdNA,
            ":startDate": startDate,
            ":endDate": endDate,
          },
          ScanIndexForward: "backward",
        };
        try {
          ddbAppDetailsList = [];
          myDocumentClient.query(innerTableParams, onQueryInnerForNA);
        } catch (e) {
          console.log("error while querying data", e);
        }
      } else {
        queryInnerForNA(staffId, parentIndex, childIndex + 1);
      }
    }
  }

  function onQueryInnerForNA(err, data) {
    if (err) {
      console.log("Inside error", err);
    } else {
      let mapApp = null;
      if (data && data.Items && data.Items.length > 0) {
        for (var i = 0; i < data.Items.length; i++) {
          mapApp = setAppData(data.Items[i]);
          ddbAppDetailsList.push(mapApp);
        }
        if (typeof data.LastEvaluatedKey != "undefined") {
          innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
          myDocumentClient.query(innerTableParams, onQueryInnerForNA);
        } else {
          dict[innerStaffIdNA] = ddbAppDetailsList;
          queryInnerForNA(staffId, parentIndex, childIndex + 1);
        }
      }
    }
  }

  function queryInner(staffId, parentIndex, childIndex) {
    console.log("CM queryInner==>");

    var innerStaffList = staffIndexList[staffId];
    if (childIndex == innerStaffList.length) {
      dict[staffId] = ddbAppDetailsList;
      queryAppDetailsForCM(parentIndex + 1);
    } else {
      var innerStaffId = innerStaffList[childIndex]["STF_ID"];
      var innerTableParams = {
        TableName: "APP_DETAILS",
        IndexName: "STF_ID-CREATION_DT-index",
        KeyConditionExpression:
          "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION_DT",
        },
        ExpressionAttributeValues: {
          ":stfId": innerStaffId,
          ":startDate": startDate,
          ":endDate": endDate,
        },
        ScanIndexForward: "backward",
      };
      try {
        ddbAppDetailsList = [];
        myDocumentClient.query(innerTableParams, onQueryInner);
      } catch (e) {
        console.log("error while querying data", e);
      }
    }
  }

  function onQueryInner(err, data) {
    if (err) {
      console.log("Inside error", err);
    } else {
      let mapApp = null;
      if (data && data.Items && data.Items.length > 0) {
        for (var i = 0; i < data.Items.length; i++) {
          mapApp = setAppData(data.Items[i]);
          ddbAppDetailsList.push(mapApp);
        }
        if (typeof data.LastEvaluatedKey != "undefined") {
          innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
          myDocumentClient.query(innerTableParams, onQueryInner);
        } else {
          queryInner(staffId, parentIndex, childIndex + 1);
        }
      }
    }
  }

  function queryAppDetailsWithChannelId(index) {
    if (index == staffIndexList.length) {
      const zipObject = zip(appData);
      zipObject.then(function (result) {
        const compressedData = JSON.stringify(result);
        var params = {
          Bucket: "rocketmaniladataobjects",
          ServerSideEncryption: "AES256",
          Key: "PowerUser/PU_Staff_Object",
          Body: compressedData,
        };
        $s3.putObject(params, function (err, data) {
          if (err) {
            console.log(err, err.stack); // an error occurred
          } else {
            console.log(data); // successful response
            var params1 = {
              Bucket: "rocketmaniladataobjects",
              Key: "PowerUser/PU_Staff_Object",
              VersionId: data.VersionId,
            };
            var url = $s3.getSignedUrl("getObject", params1);
            console.log("The URL is", url);
            callback(null, url);
          }
        });
      });
    } else {
      queryAppDetailsPU(index);
    }
  }

  function queryAppDetailsWithChannelIdOld(index) {
    console.log("PU queryAppDetailsWithChannelIdOld==>");
    queryAppDetailsPU(index);
  }

  function stringify(value) {
    if (value != undefined) {
      return JSON.stringify(
        value,
        (__, v) => (typeof v === "bigint" ? v.toString() : v),
      );
    }
  }

  function queryAppDetailsPU(index) {
    console.log("PU queryAppDetailsPU==>");
    console.log("index", index);
    var channelId = staffIndexList[index].CHANNEL_ID;
    console.log("channelId", staffIndexList[index].CHANNEL_ID);
    var appTableParams = {
      TableName: "APP_DETAILS",
      IndexName: "CHANNEL_ID-CREATION_DT-index",
      KeyConditionExpression:
        "#CHANNEL_ID = :channelId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
      ExpressionAttributeNames: {
        "#CHANNEL_ID": "CHANNEL_ID",
        "#CREATION_DT": "CREATION_DT",
      },
      ExpressionAttributeValues: {
        ":channelId": channelId,
        ":startDate": startDate,
        ":endDate": endDate,
      },
      ScanIndexForward: "backward",
    };
    console.log("PU appTableParams-->", appTableParams);
    console.log("lastEvaluatedKey: ", lastEvaluatedKey);
    if (lastEvaluatedKey) {
      appTableParams.ExclusiveStartKey = lastEvaluatedKey;
    }
    try {
      ddbAppDetailsList = [];
      myDocumentClient.query(appTableParams, onQuery);
    } catch (e) {
      console.log("error while querying data", e);
    }
  }

  function setAppData(items) {
    let mapApp = {};
    if (items != undefined) {
      mapApp = {
        appId: items.APP_ID,
        staffId: items.STF_ID,
        appType: items.APP_TYPE,
        status: items.APP_STATUS,
        additionalData: items.ADDITIONAL_DATA,
        applStatus: items.APPL_STATUS,
        bureauStatus: items.BUREAU_STATUS,
        campaignId: items.CAMPAIGN_ID,
        cardApplied: items.CARD_APPL,
        channelId: items.CHANNEL_ID,
        cid: items.CID,
        completionDate: items.COMPLETION_DT,
        creationDate: items.CREATION_DT,
        custDob: items.CUST_DOB,
        custEmail: items.CUST_EMAIL,
        customerId: items.CUST_ID,
        custName: items.CUST_NAME,
        customerName: items.CUST_NAME,
        homeCountry: items.HOME_COUNTRY,
        iDType: items.ID_TYPE,
        isLead: items.IS_LEAD,
        mobileNumber: items.MOB_NUM,
        otpVerifyStatus: items.OTP_VERIFY_STATUS,
        remarks: items.REMARKS,
        result: items.RESULT,
        staffName: items.STF_NAME,
        homeBlock: items.HOME_BLOCK,
        homeCity: items.HOME_CITY,
        homeProvince: items.HOME_PROVINCE,
        homeStreet: items.HOME_STREET,
        homeZipcode: items.HOME_ZIPCODE,
        customerRef: items.CUST_NAME,
        uniqueCustRef: items.UNIQUE_CUST_REF,
        creditCardNum: items.CREDIT_CARD_NUM,
        appMessage: items.AppMessage,
        appResponsebody: items.AppResponsebody,
        appStatusCode: items.AppStatusCode,
        appId: items.APP_ID,
        homeAdd1: items.HOME_ADD1,
        homeAdd2: items.HOME_ADD2,
        homeAdd3: items.HOME_ADD3,
        productCd: items.PRODUCT_CD,
        cardTypeValue: items.CARD_TYPE_VALUE,
        staffTimestamp: items.STAFF_TIMESTAMP,
        followupStatus: items.FOLLOWUP_STATUS,
        remarksOnly: items.REMARKS_ONLY,
      };
    }
    return mapApp;
  }
};
