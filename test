var AWS = require("aws-sdk");
var lambda = new AWS.Lambda();
const { deflate, unzip, gzipSync } = require("zlib");
var myDocumentClient = new AWS.DynamoDB.DocumentClient();
const { promisify } = require("util");
const asyncDeflate = promisify(deflate);

exports.handler = function (event, context, callback) {
    async function zip(object) {
        return (await asyncDeflate(JSON.stringify(object))).toString("base64");
    }

    var staffIndexList = event.ddbStaffMappingList;
    var dateString = event.dateString;
    console.log("dateString: ", dateString);
    var dict = {};
    var ddbAppDetailsList = [];
    var rangeDateCM = new Date(new Date().setDate(new Date().getDate() - 1));
    var dateStringCM = rangeDateCM.toISOString();
    var startDate = "";
    var endDate = "";

    if (event.startDate && event.endDate) {
        startDate = event.startDate;
        endDate = event.endDate;
        console.log("startDate from event", startDate);
        console.log("endDate from event", endDate);
    } else {
        var todayDate = new Date();
        var prevDate = new Date(new Date().setDate(new Date().getDate() - 15));
        if (event.role === "TM") {
            prevDate = new Date(new Date().setDate(new Date().getDate() - 61));
        }
        console.log("todayDate: ", todayDate);
        console.log("prevDate :", prevDate);
        startDate = prevDate.toISOString();
        endDate = todayDate.toISOString();
    }

    if (event.role === "TM" || event.role === "TL") {
        console.log("event.role: ", event.role);
        queryAppDetailsWithStaffId(0);
    } else if (event.role === "CM") {
        queryAppDetailsForCM(0);
    } else if (event.role === "PU") {
        queryAppDetailsWithChannelId(0);
    } else {
        callback(null, null);
    }

    function queryAppDetailsWithStaffId(index) {
        if (index == staffIndexList.length) {
            const zipobject = zip(dict);
            zipobject.then(function (result) {
                callback(null, result);
            });
        } else {
            queryAppDetails(index);
        }
    }

    function queryAppDetails(index) {
        console.log("index: ", index);
        var staffId = staffIndexList[index].STF_ID;
        console.log("staffId: ", staffId);
        console.log("startDate:", startDate);
        console.log("endDate: ", endDate);

        var appTableParams = {
            TableName: "APP_DETAILS",
            IndexName: "STF_ID-CREATION_DT-index",
            KeyConditionExpression: "#STF_ID = :stfid AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
            ExpressionAttributeNames: {
                "#STF_ID": "STF_ID",
                "#CREATION_DT": "CREATION_DT",
            },
            ExpressionAttributeValues: {
                ":stfId": staffId,
                ":startDate": startDate,
                ":endDate": endDate,
            },
            ScanIndexForward: "backward",
        };

        console.log("appTableParams: ", appTableParams);

        try {
            ddbAppDetailsList = [];
            myDocumentClient.query(appTableParams, onQuery);

            function onQuery(err, data) {
                if (err) {
                    console.log("Inside error", err);
                } else {
                    let mapApp = null;
                    if (data && data.Items && data.Items.length > 0) {
                        console.log("data.Items.length: ", data.Items.length);
                        for (var i = 0; i < data.Items.length; i++) {
                            mapApp = setAppData(data.Items[i]);
                            ddbAppDetailsList.push(mapApp);
                        }
                    }
                    if (typeof data.LastEvaluatedKey != "undefined") {
                        appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                        myDocumentClient.query(appTableParams, onQuery);
                    } else {
                        dict[staffId] = ddbAppDetailsList;
                        queryAppDetailsWithStaffId(index + 1);
                    }
                }
            }
        } catch (e) {
            console.log("error while querying data", e);
        }
    }

    function queryAppDetailsForCM(index) {
        if (index == Object.keys(staffIndexList).length) {
            const zipobject = zip(dict);
            zipobject.then(function (result) {
                callback(null, result);
            });
        } else {
            queryAppDetailsChannelManager(index);
        }
    }

    function queryAppDetailsChannelManager(index) {
        var staffId = Object.keys(staffIndexList)[index];
        if (staffId !== "NA") {
            var appTableParams = {
                TableName: "APP_DETAILS",
                IndexName: "STF_ID-CREATION_DT-index",
                KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT > :sysdate",
                ExpressionAttributeNames: {
                    "#STF_ID": "STF_ID",
                    "#CREATION_DT": "CREATION_DT",
                },
                ExpressionAttributeValues: {
                    ":stfId": staffId,
                    ":sysdate": dateStringCM,
                },
                ScanIndexForward: "backward",
            };

            try {
                ddbAppDetailsList = [];
                myDocumentClient.query(appTableParams, onQuery);

                function onQuery(err, data) {
                    if (err) {
                        console.log("Inside error", err);
                    } else {
                        let mapApp = null;
                        if (data && data.Items && data.Items.length > 0) {
                            for (var i = 0; i < data.Items.length; i++) {
                                mapApp = setAppData(data.Items[i]);
                                ddbAppDetailsList.push(mapApp);
                            }
                        }
                        if (typeof data.LastEvaluatedKey != "undefined") {
                            appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                            myDocumentClient.query(appTableParams, onQuery);
                        } else {
                            queryInner(staffId, index, 0);
                        }
                    }
                }
            } catch (e) {
                console.log("error while querying data", e);
            }
        } else {
            console.log("StaffId ^^", staffId);
            queryInnerForNA(staffId, index, 0);
        }
    }

    function queryInnerForNA(staffId, parentIndex, childIndex) {
        var innerStaffList = staffIndexList[staffId];
        console.log("innerStaffList", innerStaffList);
        if (childIndex == innerStaffList.length) {
            queryAppDetailsForCM(parentIndex + 1);
        } else {
            var innerStaffIdNA = innerStaffList[childIndex].STF_ID;
            if (!(innerStaffIdNA in dict)) {
                console.log("NA staff id", innerStaffIdNA);
                var innerTableParams = {
                    TableName: "APP_DETAILS",
                    IndexName: "STF_ID-CREATION_DT-index",
                    KeyConditionExpression: "#STF_ID = :stfId AND #CREATION_DT >= :sysdate",
                    ExpressionAttributeNames: {
                        "#STF_ID": "STF_ID",
                        "#CREATION_DT": "CREATION_DT",
                    },
                    ExpressionAttributeValues: {
                        ":stfId": innerStaffIdNA,
                        ":sysdate": dateStringCM,
                    },
                    ScanIndexForward: "backward",
                };

                try {
                    ddbAppDetailsList = [];
                    myDocumentClient.query(innerTableParams, onQueryInnerForNA);

                    function onQueryInnerForNA(err, data) {
                        if (err) {
                            console.log("Inside error", err);
                        } else {
                            let mapApp = null;
                            if (data && data.Items && data.Items.length > 0) {
                                for (var i = 0; i < data.Items.length; i++) {
                                    mapApp = setAppData(data.Items[i]);
                                    ddbAppDetailsList.push(mapApp);
                                }
                            }
                            if (typeof data.LastEvaluatedKey != "undefined") {
                                innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                                myDocumentClient.query(innerTableParams, onQueryInnerForNA);
                            } else {
                                dict[innerStaffIdNA] = ddbAppDetailsList;
                                queryInnerForNA(staffId, parentIndex, childIndex + 1);
                            }
                        }
                    }
                } catch (e) {
                    console.log("error while querying data", e);
                }
            } else {
                queryInnerForNA(staffId, parentIndex, childIndex + 1);
            }
        }
    }

    function queryInner(staffId, parentIndex, childIndex) {
        var innerStaffList = staffIndexList[staffId];
        if (childIndex == innerStaffList.length) {
            dict[staffId] = ddbAppDetailsList;
            queryAppDetailsForCM(parentIndex + 1);
        } else {
            var innerStaffId = innerStaffList[childIndex].STF_ID;
            var innerTableParams = {
                TableName: "APP_DETAILS",
                IndexName: "STF_ID-CREATION_DT-index",
                KeyConditionExpression: "#STF_ID = :stfid AND #CREATION_DT > :sysdate",
                ExpressionAttributeNames: {
                    "#STF_ID": "STF_ID",
                    "#CREATION_DT": "CREATION_DT",
                },
                ExpressionAttributeValues: {
                    ":stfId": innerStaffId,
                    ":sysdate": dateStringCM,
                },
                ScanIndexForward: "backward",
            };

            try {
                myDocumentClient.query(innerTableParams, onQueryInner);

                function onQueryInner(err, data) {
                    if (err) {
                        console.log("Inside error", err);
                    } else {
                        let mapApp = null;
                        if (data && data.Items && data.Items.length > 0) {
                            for (var i = 0; i < data.Items.length; i++) {
                                mapApp = setAppData(data.Items[i]);
                                ddbAppDetailsList.push(mapApp);
                            }
                        }
                        if (typeof data.LastEvaluatedKey != "undefined") {
                            innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                            myDocumentClient.query(innerTableParams, onQueryInner);
                        } else {
                            queryInner(staffId, parentIndex, childIndex + 1);
                        }
                    }
                }
            } catch (e) {
                console.log("error while querying data", e);
            }
        }
    }

    function queryAppDetailsWithChannelId(index) {
        if (index == staffIndexList.length) {
            callback(null, null);
        } else {
            var channelId = staffIndexList[index].CHANNEL_ID;
            var appTableParams = {
                TableName: "CHANNEL_DETAILS",
                IndexName: "CHANNEL_ID-CREATION_DT-index",
                KeyConditionExpression: "#CHANNEL_ID = :channelId AND #CREATION_DT >= :sysdate",
                ExpressionAttributeNames: {
                    "#CHANNEL_ID": "CHANNEL_ID",
                    "#CREATION_DT": "CREATION_DT",
                },
                ExpressionAttributeValues: {
                    ":channelId": channelId,
                    ":sysdate": dateString,
                },
                ScanIndexForward: "backward",
            };

            try {
                ddbAppDetailsList = [];
                myDocumentClient.query(appTableParams, onquery);

                function onquery(err, data) {
                    if (err) {
                        console.log("Inside error", err);
                    } else {
                        let mapApp = null;
                        if (data && data.Items && data.Items.length > 0) {
                            data.Items.forEach(function (itemData) {
                                mapApp = setAppData(itemData);
                                ddbAppDetailsList.push(mapApp);
                            });
                        }
                        if (typeof data.LastEvaluatedKey != "undefined") {
                            appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
                            myDocumentClient.query(appTableParams, onquery);
                        } else {
                            dict[channelId] = ddbAppDetailsList;
                            queryAppDetailsWithChannelId(index + 1);
                        }
                    }
                }
            } catch (e) {
                console.log("error while querying data", e);
            }
        }
    }

    function queryAppDetailsPU(index) {
        // Implementation for queryAppDetailsPU goes here
    }

    function setAppData(items) {
        let mapParam = {};
        if (items != undefined) {
            mapParam = {
                appId: items.APP_ID,
                staffId: items.STF_ID,
                saapId: items.AAPS_STATUS,
                appStatus: items.APP_STATUS,
                additionalData: items.ADDITIONAL_DATA,
                applstatus: items.APPL_STATUS,
                bureaustatus: items.BUREAU_STATUS,
                campaignId: items.CAMPAIGN_ID,
                cardType: items.CARD_TYPE,
                channelId: items.CHANNEL_ID,
                cid: items.CID,
                appCompletionDate: items.COMPLETION_DT,
                appCreationDate: items.CREATION_DT,
                custDob: items.CUST_DOB,
                custEmail: items.CUST_EMAIL,
                custId: items.CUST_ID,
                custname: items.CUST_NAME,
                customerName: items.CUST_NAME,
                homeCountry: items.HOME_COUNTRY,
                idType: items.ID_TYPE,
                isLead: items.IS_LEAD,
                mobNumber: items.MOB_NUM,
                otpVerifyStatus: items.OTP_VERIFY_STATUS,
                remarks: items.REMARKS,
                srcUrl: items.SRC_URL,
                staffName: items.STF_NAME,
                homeBlock: items.HOME_BLOCK,
                homeCity: items.HOME_CITY,
                homeProvince: items.HOME_PROVINCE,
                homeStreet: items.HOME_STREET,
                homeZipcode: items.HOME_ZIPCODE,
                custMname: items.CUST_MNAME,
                jumpCustRef: items.JUMP_CUST_REF,
                additionalInfo: items.UNIQUE_CARD_NUM,
                appMessage: items.APP_MESSAGE,
                appResponseCode: items.APP_RESPONSE_CODE,
                appStatusCode: items.APP_STATUS_CODE,
                appId2: items.APP_ID,
                homeAdd1: items.HOME_ADD1,
                homeAdd2: items.HOME_ADD2,
                homeAdd3: items.HOME_ADD3,
                pincode: items.PINCODE,
                idTypeValue: items.ID_TYPE_VALUE,
                staffTimestamp: items.STAFF_TIMESTAMP,
                followupStatus: items.FOLLOWUP_STATUS,
                remarkOnly: items.REMARK_ONLY,
            };
        }
        return mapParam;
    }
};
