import { S3Client, PutObjectCommand, GetObjectCommand } from "@aws-sdk/client-s3";
import { DynamoDBDocumentClient, QueryCommand } from "@aws-sdk/lib-dynamodb";
import { DynamoDBClient } from "@aws-sdk/client-dynamodb";
import { deflate } from "zlib";
import { promisify } from "util";

const s3 = new S3Client({}); // Initialize S3Client
const dbClient = new DynamoDBClient({}); // Initialize DynamoDBClient
const myDocumentClient = DynamoDBDocumentClient.from(dbClient); // Create DocumentClient from DynamoDBClient

const asyncDeflate = promisify(deflate);

async function zip(object) {
  return (await asyncDeflate(JSON.stringify(object))).toString("base64");
}

export const handler = async (event, context, callback) => {
  console.log("Event", event);
  const staffIndexList = event.ddbStaffMappingList;
  console.log("staffIndexList: ", staffIndexList);

  const dict = {};
  const appData = {};

  let ddbAppDetailsList = [];
  const startDate = event.startDate;
  const endDate = event.endDate;

  let index = 0;

  const lastEvaluatedKey = event.lastEvaluatedKey;
  console.log("lastEvaluatedKey: ", lastEvaluatedKey);

  console.log("event.ChannelListIndex", event.ChannelListIndex);
  if (event.ChannelListIndex) {
    index = event.ChannelListIndex;
  }
  console.log("index: ", index);
  console.log("Role", event.role);

  try {
    if (event.role === "TM" || event.role === "TL") {
      await queryAppDetailsWithStaffId(0);
      callback(
        null,
        JSON.stringify(dict, (key, value) => {
          if (value > Number.MAX_SAFE_INTEGER) {
            return value.toString() + "";
          } else {
            return value;
          }
        }),
      );
    } else if (event.role === "CM") {
      const result = await queryAppDetailsForCM(0);
      callback(null, result);
    } else if (event.role === "PU") {
      console.log("executing PU role", index);
      await queryAppDetailsWithChannelId(index);
    } else {
      callback(null, null);
    }
  } catch (error) {
    console.error("Handler error:", error);
    callback(error, null);
  }

  async function queryAppDetailsWithStaffId(currentIndex) {
    if (currentIndex === staffIndexList.length) {
      return;
    } else {
      await queryAppDetails(currentIndex);
      return queryAppDetailsWithStaffId(currentIndex + 1); // Recurse for next staff
    }
  }

  async function onQuery(staffId, appTableParams) {
    try {
      const data = await myDocumentClient.send(new QueryCommand(appTableParams));
      let mapApp = null;
      if (data && data.Items && data.Items.length > 0) {
        for (const item of data.Items) {
          mapApp = setAppData(item);
          ddbAppDetailsList.push(mapApp);
        }
      }
      if (data.LastEvaluatedKey) {
        appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
        await onQuery(staffId, appTableParams);
      } else {
        dict[staffId] = ddbAppDetailsList;
      }
    } catch (err) {
      console.log("Inside error", err);
      throw err;
    }
  }

  async function queryAppDetails(currentIndex) {
    const staffId = staffIndexList[currentIndex].STF_ID;
    const appTableParams = {
      TableName: "APP_DETAILS",
      IndexName: "STF_ID-CREATION_DT-index",
      KeyConditionExpression: "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
      ExpressionAttributeNames: {
        "#STF_ID": "STF_ID",
        "#CREATION_DT": "CREATION_DT",
      },
      ExpressionAttributeValues: {
        ":stfId": staffId,
        ":startDate": startDate,
        ":endDate": endDate,
      },
      ScanIndexForward: false, // "backward" in v2 is false in v3 for ScanIndexForward
    };
    try {
      ddbAppDetailsList = []; // Reset for each staff ID
      await onQuery(staffId, appTableParams);
    } catch (e) {
      console.log("error while querying data", e);
      throw e;
    }
  }

  async function queryAppDetailsForCM(currentIndex) {
    console.log("CM queryAppDetailsForCM==>");
    const staffIds = Object.keys(staffIndexList);
    if (currentIndex === staffIds.length) {
      console.log("dict====  >", dict);
      const zippedObject = await zip(dict);
      return zippedObject;
    } else {
      await queryAppDetailsChannelManager(currentIndex);
      return queryAppDetailsForCM(currentIndex + 1);
    }
  }

  async function queryAppDetailsChannelManager(currentIndex) {
    console.log("CM queryAppDetailsChannelManager==>");
    const staffId = Object.keys(staffIndexList)[currentIndex];
    console.log("staffId: ", staffId);

    if (staffId !== "NA") {
      const appTableParams = {
        TableName: "APP_DETAILS",
        IndexName: "STF_ID-CREATION_DT-index",
        KeyConditionExpression: "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION_DT",
        },
        ExpressionAttributeValues: {
          ":stfId": staffId,
          ":startDate": startDate,
          ":endDate": endDate,
        },
        ScanIndexForward: false,
      };
      try {
        ddbAppDetailsList = [];
        await onQueryChannelManager(staffId, appTableParams);
        await queryInner(staffId, currentIndex, 0); // Assuming ddbAppDetailsList is populated by onQueryChannelManager
      } catch (e) {
        console.log("Inside error", e);
        throw e;
      }
    } else {
      console.log("StaffId ^^^^^^^^^^", staffId);
      await queryInnerForNA(staffId, currentIndex, 0);
    }
  }

  async function onQueryChannelManager(staffId, appTableParams) {
    try {
      const data = await myDocumentClient.send(new QueryCommand(appTableParams));
      let mapApp = null;
      if (data && data.Items && data.Items.length > 0) {
        for (const item of data.Items) {
          mapApp = setAppData(item);
          ddbAppDetailsList.push(mapApp);
        }
      }
      if (data.LastEvaluatedKey) {
        appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
        await onQueryChannelManager(staffId, appTableParams);
      }
    } catch (err) {
      console.log("Inside error", err);
      throw err;
    }
  }

  async function queryInnerForNA(staffId, parentIndex, childIndex) {
    const innerStaffList = staffIndexList[staffId];
    console.log("innerStaffList:", innerStaffList);
    console.log("childIndex:", childIndex);
    console.log("innerStaffList length", innerStaffList.length);

    if (childIndex === innerStaffList.length) {
      return; // All inner staff processed for this 'NA' group
    } else {
      const innerStaffIdNA = innerStaffList[childIndex]["STF_ID"];
      console.log("innerStaffIdNA: ", innerStaffIdNA);

      if (!(innerStaffIdNA in dict)) {
        console.log("NA staff id", innerStaffIdNA);
        const innerTableParams = {
          TableName: "APP_DETAILS",
          IndexName: "STF_ID-CREATION_DT-index",
          KeyConditionExpression: "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
          ExpressionAttributeNames: {
            "#STF_ID": "STF_ID",
            "#CREATION_DT": "CREATION_DT",
          },
          ExpressionAttributeValues: {
            ":stfId": innerStaffIdNA,
            ":startDate": startDate,
            ":endDate": endDate,
          },
          ScanIndexForward: false,
        };
        try {
          const currentNAStaffDetails = []; // Use a temporary list for current inner staff
          await onQueryInnerForNA(innerStaffIdNA, innerTableParams, currentNAStaffDetails);
          dict[innerStaffIdNA] = currentNAStaffDetails;
        } catch (e) {
          console.log("error while querying data", e);
          throw e;
        }
      }
      // Continue to the next inner staff, regardless if it was already in dict or not.
      return queryInnerForNA(staffId, parentIndex, childIndex + 1);
    }
  }

  async function onQueryInnerForNA(innerStaffIdNA, innerTableParams, currentNAStaffDetails) {
    try {
      const data = await myDocumentClient.send(new QueryCommand(innerTableParams));
      if (data && data.Items && data.Items.length > 0) {
        for (const item of data.Items) {
          currentNAStaffDetails.push(setAppData(item));
        }
      }
      if (data.LastEvaluatedKey) {
        innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
        await onQueryInnerForNA(innerStaffIdNA, innerTableParams, currentNAStaffDetails);
      }
    } catch (err) {
      console.log("Inside error", err);
      throw err;
    }
  }

  async function queryInner(staffId, parentIndex, childIndex) {
    console.log("CM queryInner==>");
    const innerStaffList = staffIndexList[staffId];

    if (childIndex === innerStaffList.length) {
      // All inner staff processed for this staffId
      dict[staffId] = ddbAppDetailsList; // Assign collected details to the parent staffId
      return;
    } else {
      const innerStaffId = innerStaffList[childIndex]["STF_ID"];
      const innerTableParams = {
        TableName: "APP_DETAILS",
        IndexName: "STF_ID-CREATION_DT-index",
        KeyConditionExpression: "#STF_ID = :stfId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
        ExpressionAttributeNames: {
          "#STF_ID": "STF_ID",
          "#CREATION_DT": "CREATION_DT",
        },
        ExpressionAttributeValues: {
          ":stfId": innerStaffId,
          ":startDate": startDate,
          ":endDate": endDate,
        },
        ScanIndexForward: false,
      };
      try {
        await onQueryInner(innerTableParams);
        return queryInner(staffId, parentIndex, childIndex + 1);
      } catch (e) {
        console.log("error while querying data", e);
        throw e;
      }
    }
  }

  async function onQueryInner(innerTableParams) {
    try {
      const data = await myDocumentClient.send(new QueryCommand(innerTableParams));
      if (data && data.Items && data.Items.length > 0) {
        for (const item of data.Items) {
          ddbAppDetailsList.push(setAppData(item));
        }
      }
      if (data.LastEvaluatedKey) {
        innerTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
        await onQueryInner(innerTableParams);
      }
    } catch (err) {
      console.log("Inside error", err);
      throw err;
    }
  }

  async function queryAppDetailsWithChannelId(currentIndex) {
    if (currentIndex === staffIndexList.length) {
      const zippedObject = await zip(appData);
      const compressedData = JSON.stringify(zippedObject);
      const params = {
        Bucket: "rocketmaniladataobjects",
        ServerSideEncryption: "AES256",
        Key: "PowerUser/PU_Staff_Object",
        Body: compressedData,
      };

      try {
        const putCommand = new PutObjectCommand(params);
        const data = await s3.send(putCommand);
        console.log(data);

        const params1 = {
          Bucket: "rocketmaniladataobjects",
          Key: "PowerUser/PU_Staff_Object",
          VersionId: data.VersionId,
        };
        const getCommand = new GetObjectCommand(params1);
        // Note: getSignedUrl is not directly available on GetObjectCommand in v3.
        // You'll need to use getSignedUrl from @aws-sdk/s3-request-presigner
        // For a simple example, we'll just log the key for now.
        // If you need a signed URL, you'll need to install and import @aws-sdk/s3-request-presigner
        // Example: const { getSignedUrl } = require("@aws-sdk/s3-request-presigner");
        //          const url = await getSignedUrl(s3, getCommand, { expiresIn: 3600 }); // 1 hour expiration
        console.log("The object was uploaded to:", params.Key);
        callback(null, `Object uploaded: ${params.Key}. Signed URL generation would be here.`);
      } catch (err) {
        console.log(err, err.stack);
        callback(err, null);
      }
    } else {
      await queryAppDetailsPU(currentIndex);
      return queryAppDetailsWithChannelId(currentIndex + 1); // Recurse
    }
  }

  async function queryAppDetailsPU(currentIndex) {
    console.log("PU queryAppDetailsPU==>");
    console.log("index", currentIndex);
    const channelId = staffIndexList[currentIndex].CHANNEL_ID;

    const appTableParams = {
      TableName: "APP_DETAILS",
      IndexName: "CHANNEL_ID-CREATION_DT-index",
      KeyConditionExpression: "#CHANNEL_ID = :channelId AND (#CREATION_DT BETWEEN :startDate AND :endDate)",
      ExpressionAttributeNames: {
        "#CHANNEL_ID": "CHANNEL_ID",
        "#CREATION_DT": "CREATION_DT",
      },
      ExpressionAttributeValues: {
        ":channelId": channelId,
        ":startDate": startDate,
        ":endDate": endDate,
      },
      ScanIndexForward: false,
    };
    console.log("PU appTableParams-->", appTableParams);
    console.log("lastEvaluatedKey: ", lastEvaluatedKey);
    if (lastEvaluatedKey) {
      appTableParams.ExclusiveStartKey = lastEvaluatedKey;
    }
    try {
      ddbAppDetailsList = [];
      await onQueryPU(channelId, appTableParams);
    } catch (e) {
      console.log("error while querying data", e);
      throw e;
    }
  }

  async function onQueryPU(channelId, appTableParams) {
    try {
      const data = await myDocumentClient.send(new QueryCommand(appTableParams));
      if (data && data.Items && data.Items.length > 0) {
        for (const item of data.Items) {
          ddbAppDetailsList.push(setAppData(item));
        }
      }
      if (data.LastEvaluatedKey) {
        appTableParams.ExclusiveStartKey = data.LastEvaluatedKey;
        await onQueryPU(channelId, appTableParams);
      } else {
        appData[channelId] = ddbAppDetailsList;
        console.log("data ******", appData);
      }
    } catch (err) {
      console.log("Inside error", err);
      throw err;
    }
  }

  function setAppData(items) {
    const mapParam = {};
    if (items !== undefined) {
      mapParam.appId = items.APP_ID;
      mapParam.staffId = items.STF_ID;
      mapParam.aapsId = items.AASP_ID;
      mapParam.aapsStatus = items.AAPS_STATUS;
      mapParam.additionalData = items.ADDITIONAL_DATA;
      mapParam.applStatus = items.APPL_STATUS;
      mapParam.bureauStatus = items.BUREAU_STATUS;
      mapParam.campaignId = items.CAMPAIGN_ID;
      mapParam.cardApplied = items.CARD_TYPE;
      mapParam.channelId = items.CHANNEL_ID;
      mapParam.cId = items.CID;
      mapParam.appCompletionDate = items.COMPLETION_DT;
      mapParam.appCreationDate = items.CREATION_DT;
      mapParam.custDob = items.CUST_DOB;
      mapParam.custEmail = items.CUST_EMAIL;
      mapParam.customerID = items.CUST_ID;
      mapParam.custLname = items.CUST_LNAME;
      mapParam.customerName = items.CUST_NAME;
      mapParam.homeCountry = items.HOME_COUNTRY;
      mapParam.idType = items.ID_TYPE;
      mapParam.isLead = items.IS_LEAD;
      mapParam.mobileNumber = items.MOB_NUM;
      mapParam.otpVerifyStatus = items.OTP_VERIFY_STATUS;
      mapParam.remarks = items.REMARKS;
      mapParam.srcUrl = items.SRC_URL;
      mapParam.staffName = items.STF_NAME;
      mapParam.homeBlock = items.HOME_BLOCK;
      mapParam.homeCity = items.HOME_CITY;
      mapParam.homeProvince = items.HOME_PROVINCE;
      mapParam.homeStreet = items.HOME_STREET;
      mapParam.homeZipcode = items.HOME_ZIPCODE;
      mapParam.custMname = items.CUST_MNΑΜΕ;
      mapParam.jumioCustRef = items.JUMIO_CUST_REF;
      mapParam.creditCardNum = items.CREDIT_CARD_NUM;
      mapParam.apeMessage = items.APEMessage;
      mapParam.apeResponseBody = items.APEResponseBody;
      mapParam.apeStatusCode = items.APEStatusCode;
      mapParam.apeId = items.APE_ID;
      mapParam.homeAdd1 = items.HOME_ADD1;
      mapParam.homeAdd2 = items.HOME_ADD2;
      mapParam.homeAdd3 = items.HOME_ADD3;
      mapParam.promoCode = items.VOUCHER_CODE;
      mapParam.idTypeValue = items.ID_TYPE_VALUE;
      mapParam.staffTimestamp = items.STAFFTIMESTAMP;
      mapParam.followUpStatus = items.FOLLOWUPSTATUS;
      mapParam.remarksOnly = items.REMARKS_ONLY;
    }
    return mapParam;
  }
};
