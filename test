const { DynamoDBClient } = require("@aws-sdk/client-dynamodb");
const { DynamoDBDocumentClient, UpdateCommand, QueryCommand } = require("@aws-sdk/lib-dynamodb"); // Import commands for SDK v3

// Initialize DynamoDB Document Client for SDK v3
const ddbClient = new DynamoDBClient({ region: process.env.AWS_REGION || "eu-west-1" }); // Use AWS_REGION environment variable
const ddb = DynamoDBDocumentClient.from(ddbClient);

module.exports = {
  updateRecordForApe: async function (params) { // Changed to async function, removed callback
    try {
      // Use SDK v3 UpdateCommand
      const data = await ddb.send(new UpdateCommand(params));
      console.log("DATA in update:", data);
      console.log("UpdateItem succeeded:", stringify(data));
      return { statusCode: 200, body: stringify(data) };
    } catch (err) {
      console.error("Error updating record:", err);
      // Construct a more descriptive error message
      const errorMessage = `Could not create message: ${err.message || JSON.stringify(err)}`;
      throw {
        statusCode: 400,
        error: errorMessage,
      };
    }
  },
  queryRecordForApe: async function (params) { // Changed to async function, removed callback
    try {
      // Use SDK v3 QueryCommand
      const data = await ddb.send(new QueryCommand(params));
      console.log("DATA in query:", data);
      console.log("QueryItem succeeded:", stringify(data, null, 2));
      return { statusCode: 200, body: stringify(data, null, 2) };
    } catch (err) {
      console.error("Error querying record:", err);
      // Construct a more descriptive error message
      const errorMessage = `Could not create message: ${err.message || JSON.stringify(err)}`;
      throw {
        statusCode: 400,
        error: errorMessage,
      };
    }
  },
};

function stringify(value) {
  if (value === undefined) {
    return JSON.stringify(value);
  }
  return JSON.stringify(value, (k, v) =>
    typeof v === "bigint" ? v.toString() : v
  );
}
