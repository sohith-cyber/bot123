var AWS = require("aws-sdk");
var lambda = new AWS.Lambda();

var myDocumentClient = new AWS.DynamoDB.DocumentClient();
exports.handler = function (event, context, callback) {

    var eventNew = JSON.parse(event.body);

    var { staffId, key } = eventNew;

    var role = null;
    var channelId = null;
    var rangeDate = null;
    var dateString = null;
    var ddbStaffMappingList = [];
    var getStaffList = null;
    var eventQueryAppDetails = null;
    var leadQueryAppDetails = null;
    //final response format
    var responseBody = null;
    var responseFinal = null;

    if (event.body !== undefined && key !== undefined) {

        var paramsStaff = {
            FunctionName: "getStaffDetailsLMS",
            InvocationType: "RequestResponse",
            LogType: "Tail",
            Payload: JSON.stringify({ staffId }, null, 2)
        };

        lambda.invoke(paramsStaff, function (err, data) {
            if (err) {
                onError(err, callback);
            } else {
                var dataItems = JSON.parse(data.Payload);
                var resp = JSON.parse(dataItems.body);
                if (
                    (resp.response != null || resp.response != undefined) &&
                    resp.response.isExist == true
                ) {
                    role = resp.response.role;
                    staffId = resp.response.stfId;
                    channelId = resp.response.channelId;
                    rangeDate = new Date(new Date().setDate(new Date().getDate() - 90));
                    dateString = rangeDate.toISOString();
                    searchAppByRole();
                } else {
                    responseBody = {
                        respType: "000",
                        response: "Agent does not exist. Please add agent before proceeding",
                    };
                    responseFinal = setResponseFinal(responseBody);
                    callback(null, responseFinal);
                }
            }
        });
    }

    function searchAppByRole() {
        if (role === "TM") {
            searchForTM();
        } else if (role === "TL") {
            searchForTL();
        } else if (role === "CM") {
            searchForCM();
        } else if (role == "PU") {
            searchForPU();
        } else {
            responseBody = {
                respType: "000",
                response: "Role is not authorized to perform any action.",
            };
            responseFinal = setResponseFinal(responseBody);
            callback(null, responseFinal);
        }
    }

    function searchForTM() {
        ddbStaffMappingList = [
            {
                STF_ID: staffId,
            },
        ];
        eventQueryAppDetails = setStaffMappingParams(ddbStaffMappingList);
        callSearchAppDetailsLambdaLMS(eventQueryAppDetails);
    }

    function searchForTL() {
        getStaffList = {
            TableName: "STF_MAPPING",
            IndexName: "MGR_ID-index",
            KeyConditionExpression: "#MGR_ID = :staffId",
            ExpressionAttributeNames: {
                "#MGR_ID": "MGR_ID",
            },
            ExpressionAttributeValues: {
                ":staffId": staffId,
            },
            ProjectionExpression: "STF_ID",
        };
        ddbStaffMappingList = [{ STF_ID: staffId }];
        myDocumentClient.query(getStaffList, queryStaffMappingTable);
    }

    function searchForCM() {
        getStaffList = {
            TableName: "STF_MAPPING",
            IndexName: "CHANNEL_ID-index",
            KeyConditionExpression: "CHANNEL_ID = :channelId",
            FilterExpression: "#Staff_Role = :TM OR #Staff_Role = :TL",
            ExpressionAttributeNames: { "#Staff_Role": "ROLE" },
            ExpressionAttributeValues: {
                ":channelId": channelId,
                ":TM": "TM",
                ":TL": "TL",
            },
            ProjectionExpression: "STF_ID",
        };
        myDocumentClient.query(getStaffList, queryStaffMappingTable);
    }

    function searchForPU() {
        //for PU
        getStaffList = {
            TableName: "CHNL_MAPPING",
            ProjectionExpression: "CHANNEL_ID",
        };
        myDocumentClient.scan(getStaffList, onScanChnlMapping);
    }

    function queryStaffMappingTable(err, data) {
        try {
            if (err) {
                onError(err, callback);
            } else {
                data.Items.forEach(function (itemData) {
                    ddbStaffMappingList.push(itemData);
                });

                if (typeof data.LastEvaluatedKey != "undefined") {
                    getStaffList.ExclusiveStartKey = data.LastEvaluatedKey;
                    myDocumentClient.query(getStaffList, queryStaffMappingTable);
                } else {
                    eventQueryAppDetails = setStaffMappingParams();
                    callSearchAppDetailsLambdaLMS(eventQueryAppDetails);
                }
            }
        } catch (e) {
            console.log("Error while querying table");
        }
    }

    function onScanChnlMapping(err, data) {
        try {
            if (err) {
                onError(err, callback);
            } else {
                data.Items.forEach(function (itemData) {
                    ddbStaffMappingList.push(itemData);
                });
                if (typeof data.LastEvaluatedKey != "undefined") {
                    getStaffList.ExclusiveStartKey = data.LastEvaluatedKey;
                    myDocumentClient.scan(getStaffList, onScanChnlMapping);
                } else {
                    eventQueryAppDetails = setStaffMappingParams();
                    callSearchAppDetailsLambdaLMS(eventQueryAppDetails);
                }
            }
        } catch (e) {
            console.log("Error while querying table");
        }
    }

    function callSearchAppDetailsLambdaLMS(eventQueryAppDetails) {
        var searchParams = {
            FunctionName: "SearchAppDetailsLambdaLMS",
            InvocationType: "RequestResponse",
            LogType: "Tail",
            Payload: JSON.stringify(eventQueryAppDetails, null, 2),
        };
        lambda.invoke(searchParams, function (err, data) {
            if (err) {
                onError(err, callback);
            } else {
                responseBody = {
                    respType: "001",
                    response: "Success",
                    role: role,
                    appData: JSON.parse(data.Payload),
                };
                responseFinal = setResponseFinal(responseBody);
                callback(null, responseFinal);
            }
        });
    }

    function setStaffMappingParams() {
        var eventQueryAppDetails = {
            ddbStaffMappingList: ddbStaffMappingList,
            staffId: staffId,
            dateString: dateString,
            channelId: channelId,
            role: role,
            searchKey: key,
        };
        return eventQueryAppDetails;
    }

    function setLeadMappingParams() {
        var leadDetails = {
            dateString: dateString,
            role: role,
            searchKey: key,
        };
        return leadDetails;
    }

    //common function for errors
    function onError(err, callback) {
        var responseFail = {
            statusCode: 500,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: err,
            isBase64Encoded: false,
        };
        callback(null, responseFail);
    }

    function setResponseFinal(responseBody) {
        let responseParam = {
            statusCode: 200,
            headers: { "Access-Control-Allow-Origin": "*" },
            body: JSON.stringify(responseBody),
            isBase64Encoded: false,
        };
        return responseParam;
    }
};
