const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const { Upload } = require("@aws-sdk/lib-storage"); // For managed uploads, good for larger files

// Initialize S3 Client for SDK v3
const s3Client = new S3Client({ region: process.env.AWS_REGION || "eu-west-1" });
const BUCKET_NAME = process.env.BUCKET_NAME; // Ensure BUCKET_NAME is set in environment

module.exports = {
  uploadFormPDF: async function (data) { // Changed to async function
    try {
      const buf = Buffer.from(data.fileData, "base64");

      console.log("Doc Name is " + data.fileName + " with content type " + data.fileType);
      const filePath = getKeyName(data.appId, data.docName, data.fileName);
      console.log("File Path :", filePath);

      const objData = {
        Bucket: BUCKET_NAME,
        Key: filePath,
        Body: buf,
        ContentEncoding: "base64", // This header is about the encoding of the Body, not the file itself
        ContentType: data.fileType,
      };

      console.log("calling s3 upload Function");

      // Using @aws-sdk/lib-storage's Upload for better performance and progress handling
      const uploader = new Upload({
        client: s3Client,
        params: objData,
        tags: [], // optional tags
        queueSize: 4, // optional concurrency configuration
        partSize: 1024 * 1024 * 5, // optional part size for multipart uploads, 5MB min
        leavePartsOnError: false, // optional manually handle dropped parts
      });

      uploader.on("httpUploadProgress", (progress) => {
        console.log(`Progress: ${progress.loaded}/${progress.total}`);
      });

      await uploader.done(); // This waits for the upload to complete
      console.log("Upload complete for S3 object:", filePath);

    } catch (err) {
      console.error("Error Occurred while converting and saving Full Application form PDF in s3:", err);
      throw err; // Re-throw the error for upstream handling
    }
  },
};

function getKeyName(folder, docName, filename) {
  console.log("Doc name test :", docName);
  // Ensure folder and docName are treated as parts of the path
  const folderPath = `${folder}/${docName}`;
  return `${folderPath}/${filename}`;
}
