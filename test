const https = require("https");

// No direct AWS SDK import needed here as it's a generic HTTPS utility

module.exports = {
  createHttpsRequestPromise: async function (
    host,
    path,
    headers,
    method,
    requestData,
    callback // Callback is generally avoided in modern async/await, but kept for compatibility with original design
  ) {
    return new Promise((resolve, reject) => {
      const options = {
        host: host,
        path: path,
        rejectUnauthorized: false, // In production, this should generally be true or managed with proper CAs
        method: method,
        headers: headers,
        port: 443,
        timeout: 300000,
      };

      const req = https.request(options, (res) => {
        if (res.statusCode < 200 || res.statusCode >= 300) {
          console.log("http response==> ", res);
          return reject(new Error("statusCode=" + res.statusCode));
        }

        const body = [];
        res.on("data", (chunk) => {
          body.push(chunk);
        });

        res.on("end", () => {
          try {
            console.log("api response code is");
            console.log(res.statusCode);
            console.log("printing response body for test");
            // body is an array of Buffers, concatenate and convert to string
            const fullBody = Buffer.concat(body).toString();
            console.log(fullBody);
            // Attempt to parse only if the body is not empty
            const parsedBody = fullBody ? JSON.parse(fullBody) : {};
            resolve(parsedBody);
          } catch (e) {
            console.error("Error parsing response body:", e);
            reject(e);
          }
        });
      });

      req.on("error", (e) => {
        reject(e.message);
      });

      if (requestData) {
        req.write(requestData);
      }
      req.end();
    });
  },
};
